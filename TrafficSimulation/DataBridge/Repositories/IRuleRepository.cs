///////////////////////////////////////////////////////////
//  IRuleRepository.cs
//  Implementation of the Interface IRuleRepository
//  Generated by Enterprise Architect
//  Created on:      15-Apr-2017 16:36:48
//  Original author: David
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using Datamodel;
namespace Repositories {
    /// <summary>
    /// IRuleRepository
    /// </summary>
	public interface IRuleRepository      {

		/// <summary>
        /// Creates new rule.
        /// </summary>
        /// <param name="rule">Rule to create</param>
        /// <returns>Created rule</returns>
		Datamodel.Rule Create(Rule rule);

		/// <summary>
        /// Deletes given rule.
        /// </summary>
        /// <param name="rule">Rule to delete</param>
		void Delete(Rule rule);

        /// <summary>
        /// Get all rules.
        /// </summary>
        /// <returns>List of rules or null</returns>
        IEnumerable<Rule> GetAllRules();

        /// <summary>
        /// Get all dynamic rules.
        /// </summary>
        /// <returns>List of rules or null</returns>
        IEnumerable<Rule> GetDynamicRules();

		/// <summary>
        /// Get rule by id.
        /// </summary>
        /// <param name="ruleId">Id of rule</param>
        /// <returns>Rule or null</returns>
		Datamodel.Rule GetRule(int ruleId);

        /// <summary>
        /// Get all static rules.
        /// </summary>
        /// <returns>List of rules or null</returns>
        IEnumerable<Rule> GetStaticRules();

		/// <summary>
        /// Updates give rule.
        /// </summary>
        /// <param name="rule">Rule to update</param>
        /// <returns>Updated rule</returns>
		Datamodel.Rule Update(Rule rule);
	}//end IRuleRepository

}//end namespace Repositories